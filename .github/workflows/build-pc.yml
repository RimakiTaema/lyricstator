name: Build Lyricstator (PC - Linux & Windows)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-linux-gnu
          # Linux arm64 (cross-compilation)
          - os: ubuntu-latest
            arch: arm64
            target: aarch64-linux-gnu
          # Windows x86_64
          - os: windows-latest
            arch: x86_64
            target: x86_64-windows
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create cmake directory
        run: mkdir -p cmake

      # -------------------------------
      # Linux dependencies & build
      # -------------------------------
      - name: Setup Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y build-essential git cmake pkg-config \
            libasound2-dev libjack-jackd2-dev libsndfile1-dev \
            libvorbis-dev libogg-dev libopus-dev libflac-dev \
            libmpg123-dev libpulse-dev libfreetype6-dev \
            libglib2.0-dev libglib2.0-dev-bin libx11-dev

      # Setup cross-compilation for Linux ARM64
      - name: Setup Linux ARM64 cross-compilation
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: |
          # Install cross-compilation toolchain
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
          # For ARM64 cross-compilation, we'll use static linking and build dependencies from source
          # to avoid the complexity of cross-architecture package dependencies
          echo "ARM64 cross-compilation toolchain installed"
          echo "Will build dependencies from source for better compatibility"

      # Set up environment for ARM64 cross-compilation
      - name: Setup ARM64 environment
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: |
          # Set cross-compilation environment variables
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          
          # Verify cross-compiler is available
          aarch64-linux-gnu-gcc --version
          aarch64-linux-gnu-g++ --version
          
          echo "ARM64 cross-compilation environment configured"

      # Build dependencies for x86_64 (existing approach)
      - name: Build OpusFile (Linux x86_64)
        if: runner.os == 'Linux' && matrix.arch == 'x86_64'
        run: |
          git clone https://github.com/xiph/opusfile.git
          cd opusfile
          ./autogen.sh
          ./configure --prefix=$HOME/opusfile
          make -j$(nproc)
          make install
          export PKG_CONFIG_PATH=$HOME/opusfile/lib/pkgconfig:$PKG_CONFIG_PATH
          cd ..

      - name: Build FluidSynth v4 (Linux x86_64)
        if: runner.os == 'Linux' && matrix.arch == 'x86_64'
        run: |
          git clone https://github.com/FluidSynth/fluidsynth.git
          cd fluidsynth
          git checkout v4.2.2
          mkdir build && cd build
          cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$HOME/fluidsynth
          make -j$(nproc)
          make install
          export PKG_CONFIG_PATH=$HOME/fluidsynth/lib/pkgconfig:$PKG_CONFIG_PATH
          cd ../..

      # -------------------------------
      # Windows dependencies
      # -------------------------------
      - name: Setup Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          choco install git --yes
          choco install mingw --yes

      # -------------------------------
      # Build Lyricstator
      # -------------------------------
      - name: Build Lyricstator
        env:
          PKG_CONFIG_PATH: ${{ runner.os == 'Linux' && matrix.arch == 'x86_64' && '$HOME/opusfile/lib/pkgconfig:$HOME/fluidsynth/lib/pkgconfig' || '' }}
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            mkdir -p build && cd build
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              # Cross-compile for ARM64 - use FetchContent for all dependencies
              echo "Building for ARM64 using cross-compilation..."
              cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED_LIBS=OFF \
                -DSDL_SHARED=OFF \
                -DSDL_STATIC=ON \
                -DSDL_TEST=OFF \
                -DCMAKE_SYSTEM_NAME=Linux \
                -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
                -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
                -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
                -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
                -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY
            else
              # Native x86_64 build with pre-built dependencies
              echo "Building for x86_64 using native compilation..."
              cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED_LIBS=OFF \
                -DSDL_SHARED=OFF \
                -DSDL_STATIC=ON \
                -DCMAKE_PREFIX_PATH="$HOME/opusfile;$HOME/fluidsynth"
            fi
            echo "Starting build..."
            cmake --build . --config Release -- -j$(nproc)
          fi
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            mkdir -p build && cd build
            cmake .. \
              -DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              -DBUILD_SHARED_LIBS=OFF \
              -DSDL_SHARED=OFF \
              -DSDL_STATIC=ON
            cmake --build . --config Release -- /m
          fi

      # -------------------------------
      # Upload artifacts
      # -------------------------------
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-build-${{ runner.os }}-${{ matrix.arch }}
          path: build/
