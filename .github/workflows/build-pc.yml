name: Build Lyricstator (PC)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (manual builds only)'
        required: true
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release
      platform:
        description: 'Target platform (manual builds only)'
        required: true
        default: 'linux-windows'
        type: choice
        options:
        - linux-windows
        - linux-only
        - windows-only
        - all-platforms
      include_macos:
        description: 'Include macOS build (manual builds only, may be unreliable)'
        required: false
        default: false
        type: boolean

jobs:
  # -------------------------------
  # 1️⃣ Setup Qt6 Environment
  # -------------------------------
  setup-qt6:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Qt6
        run: |
          # Install Qt6 from official packages
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev qt6-tools-dev-tools
          
          # Set environment variables
          echo "QT_PREFIX=/usr/lib/x86_64-linux-gnu/qt6" >> $GITHUB_ENV
          echo "PATH=/usr/lib/x86_64-linux-gnu/qt6/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/qt6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Verify installation
          qmake6 --version || echo "Qt6 installation completed"

      - name: Setup Qt Installer Framework
        run: |
          # Install Qt Installer Framework
          sudo apt update
          sudo apt install -y qt6-tools-dev qt6-tools-dev-tools qbs
          # Install audio development libraries for Qt6
          sudo apt install -y libpulse-dev libasound2-dev libjack-jackd2-dev libpipewire-0.3-dev libx11-dev libxext-dev
          # Install additional audio codec libraries
          sudo apt install -y libopusfile-dev libopus-dev libvorbis-dev libflac-dev libmp3lame-dev

      - name: Cache Qt6
        uses: actions/cache@v4
        with:
          path: ${{ env.QT_PREFIX }}
          key: qt6-${{ runner.os }}-${{ hashFiles('**/CMakeLists_Qt6.txt') }}

  # -------------------------------
  # 2️⃣ Build Linux (x86_64) - Automatic + Manual
  # -------------------------------
  build-linux-x86_64:
    needs: setup-qt6
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Qt6
        run: |
          # Install Qt6 from official packages
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev qt6-tools-dev-tools
          
          # Set environment variables
          echo "QT_PREFIX=/usr/lib/x86_64-linux-gnu/qt6" >> $GITHUB_ENV
          echo "PATH=/usr/lib/x86_64-linux-gnu/qt6/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/qt6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Verify installation
          qmake6 --version || echo "Qt6 installation completed"

      - name: Setup Qt Installer Framework
        run: |
          sudo apt update
          sudo apt install -y qt6-tools-dev qt6-tools-dev-tools qbs cmake build-essential
          # Install audio development libraries for Qt6
          sudo apt install -y libpulse-dev libasound2-dev libjack-jackd2-dev libpipewire-0.3-dev libx11-dev libxext-dev
          # Install additional audio codec libraries
          sudo apt install -y libopusfile-dev libopus-dev libvorbis-dev libflac-dev libmp3lame-dev

      - name: Build Lyricstator Qt6
        run: |
          mkdir -p build_qt_linux_x86_64 && cd build_qt_linux_x86_64
          # Copy the Qt6 CMakeLists file to the build directory
          cp ../CMakeLists_Qt6.txt ./CMakeLists.txt
          
          # Use Release for automatic builds, input value for manual builds
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUILD_TYPE="${{ github.event.inputs.build_type }}"
          else
            BUILD_TYPE="Release"
          fi
          
          # Build with explicit source directory
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S .. -B .
          cmake --build . --config $BUILD_TYPE -j$(nproc)

      - name: Create Installer Project
        run: |
          cd build_qt_linux_x86_64
          make installer

      - name: Build Installer
        run: |
          cd build_qt_linux_x86_64/installer
          chmod +x build_installer.sh
          ./build_installer.sh

      - name: Upload Linux x86_64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-linux-x86_64-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type || 'Release' }}
          path: |
            build_qt_linux_x86_64/Lyricstator_Qt6
            build_qt_linux_x86_64/installer/
          if-no-files-found: warn

  # -------------------------------
  # 3️⃣ Build Linux (ARM64) - Automatic + Manual
  # -------------------------------
  build-linux-arm64:
    needs: setup-qt6
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Qt6
        run: |
          # Install Qt6 from official packages
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev qt6-tools-dev-tools
          
          # Set environment variables
          echo "QT_PREFIX=/usr/lib/x86_64-linux-gnu/qt6" >> $GITHUB_ENV
          echo "PATH=/usr/lib/x86_64-linux-gnu/qt6/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/qt6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Verify installation
          qmake6 --version || echo "Qt6 installation completed"

      - name: Setup Qt Installer Framework
        run: |
          sudo apt update
          sudo apt install -y qt6-tools-dev qt6-tools-dev-tools qbs cmake build-essential
          # Install audio development libraries for Qt6
          sudo apt install -y libpulse-dev libasound2-dev libjack-jackd2-dev libpipewire-0.3-dev libx11-dev libxext-dev
          # Install additional audio codec libraries
          sudo apt install -y libopusfile-dev libopus-dev libvorbis-dev libflac-dev libmp3lame-dev

      - name: Build Lyricstator Qt6
        run: |
          mkdir -p build_qt_linux_arm64 && cd build_qt_linux_arm64
          # Copy the Qt6 CMakeLists file to the build directory
          cp ../CMakeLists_Qt6.txt ./CMakeLists.txt
          
          # Use Release for automatic builds, input value for manual builds
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUILD_TYPE="${{ github.event.inputs.build_type }}"
          else
            BUILD_TYPE="Release"
          fi
          
          # Build with explicit source directory
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S .. -B .
          cmake --build . --config $BUILD_TYPE -j$(nproc)

      - name: Create Installer Project
        run: |
          cd build_qt_linux_arm64
          make installer

      - name: Build Installer
        run: |
          cd build_qt_linux_arm64/installer
          chmod +x build_installer.sh
          ./build_installer.sh

      - name: Upload Linux ARM64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-linux-arm64-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type || 'Release' }}
          path: |
            build_qt_linux_arm64/Lyricstator_Qt6
            build_qt_linux_arm64/installer/
          if-no-files-found: warn

  # -------------------------------
  # 4️⃣ Build Windows (x86_64) - Automatic + Manual
  # -------------------------------
  build-windows-x86_64:
    needs: setup-qt6
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Qt6
        uses: jurplel/install-qt-action@v4
        with:
          arch: 'win64_msvc2022_64'
          install-deps: true

      - name: Setup Qt Installer Framework
        shell: pwsh
        run: |
          # Try to install Qt Installer Framework
          try {
            # Try chocolatey first
            choco install qt-installer-framework -y
          } catch {
            Write-Host "Chocolatey not available for Qt Installer Framework"
            Write-Host "Will use Qt6 built-in tools instead"
          }

      - name: Build Lyricstator Qt6
        shell: pwsh
        run: |
          # Verify Qt6 installation
          Write-Host "Checking Qt6 installation..."
          if (Test-Path "$env:QT_PREFIX\bin\qmake.exe") {
            Write-Host "Qt6 found at $env:QT_PREFIX"
            & "$env:QT_PREFIX\bin\qmake.exe" --version
          } else {
            Write-Host "Qt6 not found at $env:QT_PREFIX"
            Write-Host "Available Qt installations:"
            Get-ChildItem "C:\Qt" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $_" }
            exit 1
          }
          
          mkdir -p build_qt_windows_x86_64
          cd build_qt_windows_x86_64
          # Use Release for automatic builds, input value for manual builds
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $BUILD_TYPE = "${{ github.event.inputs.build_type }}"
          } else {
            $BUILD_TYPE = "Release"
          }
          Write-Host "Build type: $BUILD_TYPE"
          
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -f ../CMakeLists_Qt6.txt ..
          cmake --build . --config $BUILD_TYPE --parallel

      - name: Create Installer Project
        shell: pwsh
        run: |
          cd build_qt_windows_x86_64
          make installer

      - name: Build Installer
        shell: pwsh
        run: |
          cd build_qt_windows_x86_64/installer
          .\build_installer.sh

      - name: Upload Windows x86_64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-windows-x86_64-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type || 'Release' }}
          path: |
            build_qt_windows_x86_64/Lyricstator_Qt6.exe
            build_qt_windows_x86_64/installer/
          if-no-files-found: warn

  # -------------------------------
  # 5️⃣ Build macOS (x86_64) - Manual Only
  # -------------------------------
  build-macos-x86_64:
    needs: setup-qt6
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'all-platforms' || github.event.inputs.include_macos == 'true') }}
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Qt6
        run: |
          # Install Qt6 using Homebrew
          brew install qt6
          
          # Set environment variables
          echo "QT_PREFIX=/opt/homebrew/opt/qt6" >> $GITHUB_ENV
          echo "PATH=/opt/homebrew/opt/qt6/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/opt/homebrew/opt/qt6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Verify installation
          qmake6 --version

      - name: Setup Qt Installer Framework
        run: |
          brew install qt6-tools qbs

      - name: Build Lyricstator Qt6
        run: |
          mkdir -p build_qt_macos_x86_64 && cd build_qt_macos_x86_64
          cmake -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type }} -f ../CMakeLists_Qt6.txt ..
          cmake --build . --config ${{ github.event.inputs.build_type }} -j$(sysctl -n hw.ncpu)

      - name: Create Installer Project
        run: |
          cd build_qt_macos_x86_64
          make installer

      - name: Build Installer
        run: |
          cd build_qt_macos_x86_64/installer
          chmod +x build_installer.sh
          ./build_installer.sh

      - name: Upload macOS x86_64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-macos-x86_64-${{ github.event.inputs.build_type }}
          path: |
            build_qt_macos_x86_64/Lyricstator_Qt6
            build_qt_macos_x86_64/installer/
          if-no-files-found: warn

  # -------------------------------
  # 6️⃣ Build Summary
  # -------------------------------
  build-summary:
    needs: [build-linux-x86_64, build-linux-arm64, build-windows-x86_64, build-macos-x86_64]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "=== Lyricstator Qt6 Build Summary ==="
          echo "Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Build Type: ${{ github.event.inputs.build_type }}"
            echo "Target Platform: ${{ github.event.inputs.platform }}"
            echo "Include macOS: ${{ github.event.inputs.include_macos }}"
          else
            echo "Build Type: Release (automatic)"
            echo "Target Platform: Linux x86_64 + ARM64 + Windows x86_64 (automatic)"
            echo "Include macOS: No (manual builds only)"
          fi
          echo ""
          echo "Build Status:"
          echo "- Linux x86_64: ${{ needs.build-linux-x86_64.result }}"
          echo "- Linux ARM64: ${{ needs.build-linux-arm64.result }}"
          echo "- Windows x86_64: ${{ needs.build-windows-x86_64.result }}"
          echo "- macOS x86_64: ${{ needs.build-macos-x86_64.result }}"
          echo ""
          echo "Artifacts created:"
          if [ "${{ needs.build-linux-x86_64.result }}" != "skipped" ]; then
            echo "- Linux x86_64: lyricstator-linux-x86_64-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type || 'Release' }}"
          fi
          if [ "${{ needs.build-linux-arm64.result }}" != "skipped" ]; then
            echo "- Linux ARM64: lyricstator-linux-arm64-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type || 'Release' }}"
          fi
          if [ "${{ needs.build-windows-x86_64.result }}" != "skipped" ]; then
            echo "- Windows x86_64: lyricstator-windows-x86_64-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_type || 'Release' }}"
          fi
          if [ "${{ needs.build-macos-x86_64.result }}" != "skipped" ]; then
            echo "- macOS x86_64: lyricstator-macos-x86_64-${{ github.event.inputs.build_type }}"
          fi
          echo ""
          echo "Build Mode:"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "- Manual build with custom options"
          else
            echo "- Automatic build (push/pull request)"
            echo "- Always builds Linux x86_64 + ARM64 + Windows x86_64"
            echo "- macOS builds require manual trigger"
          fi
          echo ""
          echo "Platform Notes:"
          echo "- Linux x86_64: Most reliable, always built"
          echo "- Linux ARM64: ARM64 support, always built"
          echo "- Windows x86_64: Reliable, always built"
          echo "- macOS x86_64: Manual only, may have issues in CI"
          echo ""
          echo "Each artifact contains:"
          echo "- Application binary"
          echo "- Qt Installer Framework project"
          echo "- Ready-to-build installer"
