name: Build Lyricstator

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # -------------------------------
  # 1️⃣ Setup Repo (runs for all OS/arch)
  # -------------------------------
  setup-repo:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

  # -------------------------------
  # 2️⃣ Build Libraries (Linux only)
  # -------------------------------
  build-libs:
    needs: setup-repo
    strategy:
      matrix:
        include:
          - arch: x86_64
          - arch: arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential git cmake pkg-config \
            libasound2-dev libjack-jackd2-dev libsndfile1-dev \
            libvorbis-dev libogg-dev libopus-dev libflac-dev \
            libmpg123-dev libpulse-dev libfreetype6-dev \
            libglib2.0-dev libx11-dev

      - name: Install ARM64 libraries (cross)
        if: matrix.arch == 'arm64'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          sudo apt install -y libasound2-dev:arm64 libjack-jackd2-dev:arm64 \
                              libsndfile1-dev:arm64 libvorbis-dev:arm64 libogg-dev:arm64 \
                              libopus-dev:arm64 libflac-dev:arm64 libmpg123-dev:arm64 \
                              libpulse-dev:arm64 libfreetype6-dev:arm64 libglib2.0-dev:arm64 \
                              libx11-dev:arm64 || true

      - name: Build OpusFile
        run: |
          git clone --depth 1 https://github.com/xiph/opusfile.git
          cd opusfile
          ./autogen.sh
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            ./configure --prefix=$HOME/opusfile --host=aarch64-linux-gnu \
                        CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++
          else
            ./configure --prefix=$HOME/opusfile
          fi
          make -j$(nproc)
          make install

      - name: Build FluidSynth
        run: |
          git clone --depth 1 --branch v2.4.7 https://github.com/FluidSynth/fluidsynth.git
          cd fluidsynth
          mkdir build && cd build
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$HOME/fluidsynth \
              -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
          else
            cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$HOME/fluidsynth
          fi
          make -j$(nproc)
          make install

      - name: Upload libraries
        uses: actions/upload-artifact@v4
        with:
          name: libs-${{ matrix.arch }}
          path: |
            $HOME/opusfile
            $HOME/fluidsynth

  # -------------------------------
  # 3️⃣ Build App (Linux + Windows)
  # -------------------------------
  build-app:
    needs: build-libs
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download libraries
        if: runner.os == 'Linux'
        uses: actions/download-artifact@v4
        with:
          name: libs-${{ matrix.arch }}
          path: $HOME

      - name: Build Lyricstator
        if: runner.os == 'Linux'
        run: |
          mkdir -p build && cd build
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DSDL_SHARED=OFF \
              -DSDL_STATIC=ON \
              -DCMAKE_PREFIX_PATH="$HOME/opusfile;$HOME/fluidsynth" \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
          else
            cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DSDL_SHARED=OFF \
              -DSDL_STATIC=ON \
              -DCMAKE_PREFIX_PATH="$HOME/opusfile;$HOME/fluidsynth"
          fi
          cmake --build . --parallel $(nproc)

      - name: Build Lyricstator (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake .. `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_SHARED_LIBS=OFF `
            -DSDL_SHARED=OFF `
            -DSDL_STATIC=ON
          cmake --build . --config Release --parallel

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/lyricstator
            build/Release/lyricstator.exe
            build/lyricstator.exe
            build/*.so
            build/*.dll
          if-no-files-found: warn
