name: Build Lyricstator (Android)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release
      abi:
        description: 'Target ABI'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - arm64-v8a
        - armeabi-v7a
        - x86
        - x86_64

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        abi: ${{ github.event.inputs.abi == 'all' && fromJSON('["arm64-v8a", "armeabi-v7a", "x86", "x86_64"]') || fromJSON('["' + github.event.inputs.abi + '"]') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Qt6 for Android
        run: |
          # Install Qt6 from official packages
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev qt6-tools-dev-tools
          
          # Set environment variables
          echo "QT_PREFIX=/usr/lib/x86_64-linux-gnu/qt6" >> $GITHUB_ENV
          echo "PATH=/usr/lib/x86_64-linux-gnu/qt6/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/qt6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          # Verify installation
          qmake6 --version || echo "Qt6 installation completed"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.2.9519653

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache NDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_NDK_ROOT }}
          key: ${{ runner.os }}-ndk-25.2.9519653

      - name: Setup Android NDK
        run: |
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build
          # Install audio development libraries for Qt6
          sudo apt install -y libpulse-dev libasound2-dev libjack-jackd2-dev libpipewire-0.3-dev libx11-dev libxext-dev
          # Install additional audio codec libraries
          sudo apt install -y libopusfile-dev libopus-dev libvorbis-dev libflac-dev libmp3lame-dev

      - name: Setup Qt6 Android environment
        run: |
          # Set Qt6 Android environment variables
          echo "QT_ANDROID=$QT_PREFIX" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV

      - name: Prepare Android assets
        run: |
          # Copy assets to Android project
          mkdir -p android/app/src/main/assets
          if [ -d "assets" ]; then
            cp -r assets/* android/app/src/main/assets/
          fi
          if [ -d "samples" ]; then
            cp -r samples android/app/src/main/assets/
          fi

      - name: Create Android CMakeLists.txt for Qt6
        run: |
          mkdir -p android/app/src/main/cpp
          cat > android/app/src/main/cpp/CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.22.1)
project(lyricstator)

# Include main project CMakeLists.txt for Qt6
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Add the main source directory
add_subdirectory(../../../../ lyricstator_main)

# Link Android-specific libraries
find_library(log-lib log)
find_library(android-lib android)

target_link_libraries(${PROJECT_NAME}
    ${log-lib}
    ${android-lib}
)
EOF

      - name: Create Android main activity for Qt6
        run: |
          mkdir -p android/app/src/main/java/com/lyricstator/app
          cat > android/app/src/main/java/com/lyricstator/app/MainActivity.java << 'EOF'
package com.lyricstator.app;

import android.app.Activity;
import android.os.Bundle;
import org.qtproject.qt6.android.bindings.QtActivity;

public class MainActivity extends QtActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }
}
EOF

      - name: Create Android manifest for Qt6
        run: |
          mkdir -p android/app/src/main
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.lyricstator.app">

    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.AppCompat.Light.DarkActionBar">
        
        <activity android:name=".MainActivity"
            android:exported="true"
            android:screenOrientation="landscape"
            android:configChanges="keyboardHidden|orientation|screenSize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
EOF

      - name: Create strings.xml
        run: |
          mkdir -p android/app/src/main/res/values
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Lyricstator</string>
</resources>
EOF

      - name: Create build.gradle for Qt6
        run: |
          cat > android/app/build.gradle << 'EOF'
plugins {
    id 'com.android.application'
}

android {
    namespace 'com.lyricstator.app'
    compileSdk 34

    defaultConfig {
        applicationId "com.lyricstator.app"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }

    ndkVersion "25.2.9519653"
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
}
EOF

      - name: Build Lyricstator Qt6
        run: |
          mkdir -p build_qt_android && cd build_qt_android
          cmake -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type }} -DANDROID=ON -S .. -B .
          cmake --build . --config ${{ github.event.inputs.build_type }} -j$(nproc)

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-android-${{ matrix.abi }}-${{ github.event.inputs.build_type }}
          path: android/app/build/outputs/apk/debug/*.apk

      - name: Build Android AAB (Release)
        if: ${{ github.event.inputs.build_type == 'Release' && matrix.abi == 'arm64-v8a' }}
        working-directory: android
        run: |
          ./gradlew bundleRelease

      - name: Upload AAB artifact
        if: ${{ github.event.inputs.build_type == 'Release' && matrix.abi == 'arm64-v8a' }}
        uses: actions/upload-artifact@v4
        with:
          name: lyricstator-android-release-aab
          path: android/app/build/outputs/bundle/release/*.aab

  # Build Summary
  build-summary:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Android Build Summary
        run: |
          echo "=== Lyricstator Qt6 Android Build Summary ==="
          echo "Build Type: ${{ github.event.inputs.build_type }}"
          echo "Target ABI: ${{ github.event.inputs.abi }}"
          echo ""
          echo "Build Status: ${{ needs.build.result }}"
          echo ""
          echo "Artifacts created:"
          echo "- APK: lyricstator-android-*-${{ github.event.inputs.build_type }}"
          if [ "${{ github.event.inputs.build_type }}" = "Release" ]; then
            echo "- AAB: lyricstator-android-release-aab (arm64-v8a only)"
          fi
          echo ""
          echo "Each APK contains:"
          echo "- Qt6 Android application"
          echo "- Native C++ code"
          echo "- Android resources and assets"